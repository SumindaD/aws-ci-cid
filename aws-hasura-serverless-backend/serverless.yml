service: tellabout-apollo-serverless

custom:
  currentStage: ${opt:stage, self:provider.stage}
  region: ${opt:region, 'us-east-1'}
  vpcName : vpc-#{AWS::AccountId}-${self:custom.currentStage}
  publicSubnetAName: publicsubnet-a-#{AWS::AccountId}-${self:custom.currentStage}
  publicSubnetBName: publicsubnet-b-#{AWS::AccountId}-${self:custom.currentStage}
  dbUserName: postgres
  dbPassword: TellAbout2020!
  dbName: tellaboutdb#{AWS::AccountId}${self:custom.currentStage}

provider:
  name: aws
  runtime: nodejs12.x
  vpc:
    securityGroupIds:
      - !Ref SecurityGroup
    subnetIds:
      - !Ref PublicSubnetA
      - !Ref PublicSubnetB

plugins:
  - serverless-pseudo-parameters

functions:
  graphql:
    handler: graphql.graphqlHandler
    events:
    - http:
        path: graphql
        method: post
        cors: true
    - http:
        path: graphql
        method: get
        cors: true

# Add VPC and Aurora Postgress
resources:
  Resources:
    # ======================= Private VPC Configuration ====================
    # Create a VPC
    VPC:
      Type: AWS::EC2::VPC
      Properties: 
        CidrBlock: 172.10.0.0/16
        EnableDnsHostnames: True
        EnableDnsSupport: True
        Tags:
          - 
            Key: name
            Value: ${self:custom.vpcName}

    # Create Subnets
    PublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 172.10.1.0/24
        VpcId: !Ref VPC
        AvailabilityZone: ${self:custom.region}a
        Tags:
          - 
            Key: name
            Value: ${self:custom.publicSubnetAName}

    PublicSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 172.10.2.0/24
        VpcId: !Ref VPC
        AvailabilityZone: ${self:custom.region}b
        Tags:
          - 
            Key: name
            Value: ${self:custom.publicSubnetBName}

    # Create a Route Table. This will contain a route out to Internet Gateway
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC

    # Attach Subnet to Route Table
    SubnetAPublicRouteAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnetA
    
    SubnetBPublicRouteAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnetB

    # Create an Internet Gateway
    InternetGateway:
      Type: AWS::EC2::InternetGateway

    # Attach the internet gateway to the VPC
    VPCInternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties: 
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

    # Create a route out to Internet Gateway
    PublicRoute:
      Type: AWS::EC2::Route
      DependsOn: VPCInternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    # Creat a security group and open port 80 and 443 in bound and out bound
    SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup-#{AWS::AccountId}-${self:custom.currentStage}
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: 0.0.0.0/0

    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties: 
        DBSubnetGroupDescription: tellaboutdbsubnetgroup-#{AWS::AccountId}-${self:custom.currentStage}
        DBSubnetGroupName: tellaboutdbsubnetgroup-#{AWS::AccountId}-${self:custom.currentStage}
        SubnetIds: 
          - !Ref PublicSubnetA
          - !Ref PublicSubnetB

    RDSDBClusterParameterGroup: 
      Type: AWS::RDS::DBClusterParameterGroup
      Properties: 
        Description: tellaboutdbclusterparametergroup-#{AWS::AccountId}-${self:custom.currentStage}
        Family: aurora-postgresql11
        Parameters:
            rds.force_ssl: 1

    RDSCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        Engine: aurora-postgresql
        EngineVersion: 11.7
        Port: 5432
        DatabaseName: ${self:custom.dbName}
        MasterUsername: ${self:custom.dbUserName}
        MasterUserPassword: ${self:custom.dbPassword}
        DBClusterParameterGroupName: 
          Ref: RDSDBClusterParameterGroup
        DBSubnetGroupName: 
          Ref: DBSubnetGroup
        VpcSecurityGroupIds:
          - !Ref SecurityGroup

    RDSDatabase:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceClass : db.t3.medium
        Engine : aurora-postgresql
        DBClusterIdentifier: !Ref RDSCluster
        EngineVersion: 11.7
        DBInstanceIdentifier: tellaboutdbinstance-#{AWS::AccountId}-${self:custom.currentStage}
        PubliclyAccessible: true

  Outputs:
    PostgresURL:
      Description: 'Postgress database connection string'
      Value: !Join
             - ''
             - - 'postgresql://'
               - ${self:custom.dbUserName}
               - ':'
               - ${self:custom.dbPassword}
               - '@'
               - !GetAtt RDSCluster.Endpoint.Address
               - '/'
               - ${self:custom.dbName}